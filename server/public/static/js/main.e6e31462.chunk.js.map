{"version":3,"sources":["models/ActiveView.ts","pages/JoinPage.tsx","App.tsx","serviceWorker.ts","index.tsx","store/configureStore.ts"],"names":["ActiveViewEnum","JoinPage","react_default","a","createElement","id","className","name","placeholder","activeView","Join","view","pages_JoinPage","getActiveView","App","Fragment","Boolean","window","location","hostname","match","store","rootReducer","combineReducers","createStore","configureStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kLAAYA,sKCKZ,IAgBeC,EAhBoB,WAC/B,OACIC,EAAAC,EAAAC,cAAA,QAAMC,GAAG,YACLH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOC,GAAG,cAAcC,UAAU,cAAcC,KAAK,OAAOC,YAAY,SACxEN,EAAAC,EAAAC,cAAA,SAAOC,GAAG,SAASC,UAAU,cAAcC,KAAK,KAAKC,YAAY,cAGrEN,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAlB,YACAJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAlB,qBCNNG,EAAaT,EAAeU,MAGlC,WACE,IAAIC,EACJ,OAAQF,GACN,KAAKT,EAAeU,KAClBC,EAAOT,EAAAC,EAAAC,cAACQ,EAAD,OALAC,GA4Bb,IAgCeC,EAhCO,WACpB,IAAMH,EACN,WAEE,OAAQF,GACN,KAAKT,EAAeU,KAClB,OAAOR,EAAAC,EAAAC,cAACQ,EAAD,OALAC,GAwBb,OACIX,EAAAC,EAAAC,cAAAF,EAAAC,EAAAY,SAAA,KACCJ,ICtDaK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECVN,IAAMC,ECLS,WAEX,IAAMC,EAAcC,YAAgB,IAGpC,OAAOC,YAAYF,GDATG,GACdC,IAASC,OAEDzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAUP,MAAOA,GACbnB,EAAAC,EAAAC,cAACyB,EAAD,OAERC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e6e31462.chunk.js","sourcesContent":["export enum ActiveViewEnum {\r\n  Join,\r\n  CreateGame,\r\n  WaitingForPlayers\r\n}\r\n","import React from 'react';\r\n\r\ninterface IProps {\r\n};\r\n\r\nconst JoinPage: React.FC<IProps> = () => {\r\n    return (\r\n        <main id=\"joinView\">\r\n            <h1>Debellatio</h1>\r\n            <form>\r\n                <input id=\"joinNameBox\" className=\"login-input\" name=\"name\" placeholder=\"Name\"/>\r\n                <input id=\"pinBox\" className=\"login-input\" name=\"id\" placeholder=\"Game PIN\"/>\r\n\r\n            </form>\r\n            <button className=\"startButton\">Join Now</button>\r\n            <button className=\"startButton\" >Create New game</button>\r\n        </main>\r\n    );\r\n};\r\n\r\n\r\nexport default JoinPage;","import React from 'react';\r\nimport './App.css';\r\nimport {ActiveViewEnum} from './models/ActiveView';\r\n\r\n//Import Pages\r\nimport JoinPage from './pages/JoinPage';\r\n// import CreateGamePage from './pages/CreateGamePage';\r\n// import WaitingForPlayersPage from './pages/WaitingForPlayersPage';\r\n\r\nconst activeView = ActiveViewEnum.Join;\r\n\r\nconst view = getActiveView();\r\nfunction getActiveView(): JSX.Element | undefined {\r\n  let view;\r\n  switch (activeView) {\r\n    case ActiveViewEnum.Join:\r\n      view = <JoinPage/>;\r\n      break;\r\n  //   case ActiveView.quiz:\r\n  //     const q = getActiveQuestion();\r\n  //     view = <QuizPage text={q.text}\r\n  //                      options={q.options}\r\n  //                      correctAnswers={correctAnswers}\r\n  //                      totalQuestions={activeQuestion}\r\n  //                      onNext={nextQuestion()}/>;\r\n  //     break;\r\n  //\r\n  //   case ActiveView.summary:\r\n  //     view = <SummaryPage onStartAgain={startQuiz}\r\n  //                         correctAnswers={correctAnswers}\r\n  //                         totalQuestions={questions.length}/>;\r\n  //\r\n  //     break;\r\n  }\r\n\r\n  return view;\r\n}\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const view = getActiveView();\r\n  function getActiveView(): JSX.Element | undefined {\r\n\r\n    switch (activeView) {\r\n      case ActiveViewEnum.Join:\r\n        return <JoinPage/>;\r\n        //   case ActiveView.quiz:\r\n        //     const q = getActiveQuestion();\r\n        //     view = <QuizPage text={q.text}\r\n        //                      options={q.options}\r\n        //                      correctAnswers={correctAnswers}\r\n        //                      totalQuestions={activeQuestion}\r\n        //                      onNext={nextQuestion()}/>;\r\n        //     break;\r\n        //\r\n        //   case ActiveView.summary:\r\n        //     view = <SummaryPage onStartAgain={startQuiz}\r\n        //                         correctAnswers={correctAnswers}\r\n        //                         totalQuestions={questions.length}/>;\r\n        //\r\n        //     break;\r\n    }\r\n    return;\r\n  }\r\n  return (\r\n      <>\r\n      {view}\r\n      </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport configureStore from './store/configureStore';\r\n\r\nconst store = configureStore();\r\nReactDOM.render(\r\n\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import {combineReducers, createStore} from 'redux'\r\n// import territoriesDataReducer from './territoriesDataReducer';\r\n\r\nexport default function configureStore() {\r\n    // combine all reducers to create  root reducer\r\n    const rootReducer = combineReducers({\r\n        // territories:territoriesDataReducer\r\n    });\r\n    return createStore(rootReducer);\r\n}"],"sourceRoot":""}